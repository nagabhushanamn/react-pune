

---------------------------------------------------

UI

    - content    ==> HTML
    - style      ==> CSS
    - behavior i.e react to events ==> Javascript

---------------------------------------------------

what .js-lang can do on HTML-page in browser envi?


using browser provided web-APIs,
JavaScript-lang can bring any dynamic activity/data to web-page


browser-APIs :  ==> are based on 'w3c' recommendations ,
they are implemented nativly by browser & abstracted as JavaScript objects & functions


browser-APIs  :
    ==> DOM, XHR,Timer,....

using DOM API
-------------
 -> can create,retreive,update,delete HTML elements
 -> can change element's inner text/html content 
 -> can change element's attributes/properties
 -> can change element's styles ( css )
 -> can validate form-fields before submit to server-program
 -> can create rich UI-components like 
 ....

using XHR / Fetch
-------------------
-> can communicate with server-side programs async 

using Timer API
------------------
-> can execute any action on timeout/time-interval

New HTML APIs
--------------
https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5




problems with plain-js with browser native APIs
------------------------------------------------


 ==> browser compatability issues
 ==> memory mamanagement is manual ( i.e clean un-used DOM elements)
 ==> performance issues ( i.e DOM access should be minimal )
 ==> data-binding is manual
 ==> too much code for simple operation
 ==> code oraganization is difficult


 soln: 

    ==> using server-side page techonolgies

            i.e JSP, ASP, PHP , ...

        problems:

            => on every request, server-programs need to re-construct same UI layout with new content, keeping client state
            => on every request, server programs txring same resources, this will increase n/w bandwidth
            => on every response, browser reloads current page with new-page 

best-soln:

    => use client-side techonolgies

        i.e using third-party js lib & F.Ws


 1. jQuery


  MVC/MVVM based 

 2. knockout.js
 3. backbone.js ==> marionet.js
 4. Ember.js
 5. Angular.js from google team
 6. DOJO
 7. ExtJS from sencha
 ........


 w3c ==> web-component spec


        --> standard to develope our custom elements/components/tags


component based arch

1. React.js      from facebook   v:16
2. Angular                       v:6 
3. Vue.js
4. Polymer.js
5. Ember
6. Aurelia.js

----------------------------------------------------------

    


