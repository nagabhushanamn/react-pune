

Ref: http://crockford.com/


---------------------------------------------
.js intro

 - client-side lang on browser-envi
 +
 - server-side lang on Node.js

 - Native Mobile app

 - Desktop appln

---------------------------------------------

.js features

    - OOP + FP
    - dynamic

    - Non blocking IO
    - Single-threaded process, can be concurrent due to non blocking IO

---------------------------------------------

How to run .js-program ?

 => using js runtime/engine

 browser envi

    - chrome    ==> v8 ( c++ )
    - firefox   ==> rhino/spider ( java )
    - IE/Chakra ==> chakra
    - safari    ==> nitro
    ...

 other envi

    - Node.js   ==> v8 
    - JVM       ==> rhino / nashorn
    ...

---------------------------------------------

.js-lang is based on 'ECMAScript spec' 

latest version : ES6

---------------------------------------------

"Hello World"

---------------------------------------------

JS topics

level-1

1. data-types
2. scopes / context
3. FP + OOP

level-2

1. New syntax in ES6 & ES7
2. New APIs
3. Modules
4. concurrency model and event-loop

level-3

1. build tools
2. unit-testing F.Ws





------------------------------------------------------




problems in .js developement without module standards & loaders

    => global naming collisions
    => loading dependency modules in order


 from third parties, we got js module standards


    -> AMD ( Async Module Definition )
    -> UMD
    -> commonJS
    ..


---------------------------------------------------------    
    commonJS module standard
---------------------------------------------------------    


    -> every .js file is module by default
    -> all var & functions in .js file are private by default
    -> to abstract/export any membser(s), we should use 'module.exports' objects
    -> to require/import any module, use 'require()'
    -> group related modules into package with description file ( package.json)

   imp-note : Node.js already implemented this standard as default module standard
   
    

   NPM ( Node Package Manager )

   ==> cli tool
   ==> to publish/install packages from NPM repository


  

---------------------------------------------------------    
    ES module standard  ( in Es6)
---------------------------------------------------------  


    -> every .js file is module by default
    -> all var & functions in .js file are private by default
    -> to abstract/export any membser(s), we should use 'export' keyword
    -> to require/import any module, use 'import' keyword
    -> group related modules into package with description file ( package.json)





---------------------------------------------------

UI

    - content    ==> HTML
    - style      ==> CSS
    - behavior i.e react to events ==> Javascript

---------------------------------------------------

what .js-lang can do on HTML-page in browser envi?


using browser provided web-APIs,
JavaScript-lang can bring any dynamic activity/data to web-page


browser-APIs :  ==> are based on 'w3c' recommendations ,
they are implemented nativly by browser & abstracted as JavaScript objects & functions


browser-APIs  :
    ==> DOM, XHR,Timer,....

using DOM API
-------------
 -> can create,retreive,update,delete HTML elements
 -> can change element's inner text/html content 
 -> can change element's attributes/properties
 -> can change element's styles ( css )
 -> can validate form-fields before submit to server-program
 -> can create rich UI-components like 
 ....

using XHR / Fetch
-------------------
-> can communicate with server-side programs async 

using Timer API
------------------
-> can execute any action on timeout/time-interval

New HTML APIs
--------------
https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5




problems with plain-js with browser native APIs
------------------------------------------------


 ==> browser compatability issues
 ==> memory mamanagement is manual ( i.e clean un-used DOM elements)
 ==> performance issues ( i.e DOM access should be minimal )
 ==> data-binding is manual
 ==> too much code for simple operation
 ==> code oraganization is difficult


 soln: 

    ==> using server-side page techonolgies

            i.e JSP, ASP, PHP , ...

        problems:

            => on every request, server-programs need to re-construct same UI layout with new content, keeping client state
            => on every request, server programs txring same resources, this will increase n/w bandwidth
            => on every response, browser reloads current page with new-page 

best-soln:

    => use client-side techonolgies

        i.e using third-party js lib & F.Ws


 1. jQuery


  MVC/MVVM based 

 2. knockout.js
 3. backbone.js ==> marionet.js
 4. Ember.js
 5. Angular.js from google team
 6. DOJO
 7. ExtJS from sencha
 ........


 w3c ==> web-component spec


        --> standard to develope our custom elements/components/tags


component based arch

1. React.js      from facebook   v:16
2. Angular                       v:6 
3. Vue.js
4. Polymer.js
5. Ember
6. Aurelia.js

----------------------------------------------------------



in UI,  component based arch
-------------------------------

HTML component/element/tag
---------------------------

=> every html-tag/element/component
   is an instance of HTMLXXXElement class

 e.g

 <div></div>  instanceof 'HTMLDivElement' class


 i.e

  HTMLDivElement      ==> component-class
  <div></div>         ==> component-instance



-------------------------------------------

html-component
--------------

- props    ==> data given by parent-component 
- state    ==> comp's own data


imp-note : when component's state change,always will re-render


2 types of HTML components

    - stateless
    - statefull



 e.g input-element

         state : i.e 'value'



----------------------------------------------------------

in component based arch  ==> uni-directional data-flow

data/props will go down
action/event will come up

---------------------------------------------------------- 


working with React is 2 steps
-----------------------------


step-1: define component class
step-2: instantiate & render on virtual DOM



     




